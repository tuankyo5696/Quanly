{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\HOME\\\\Desktop\\\\Quanly_redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport * as types from './../constants/actionTypes';\n\nvar s4 = function s4() {\n  return Math.floor(1 + Math.random() * 0x10000).toString(16).substring(1); // random ÍD\n};\n\nvar generateID = function generateID() {\n  return s4() + s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4();\n};\n\nvar findIndex = function findIndex(tasks, id) {\n  var result = -1;\n  tasks.forEach(function (task, index) {\n    if (task.id === id) result = index;\n  });\n  return result;\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initialState = data ? data : [];\n\nvar myReducer = function myReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: generateID(),\n        name: action.task.name,\n        status: action.task.status === 'true' ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return _toConsumableArray(state);\n\n    case types.UPDATE_STATUS_TASK:\n      var id = action.id;\n      var index = findIndex(state, id);\n      state[index].status = !state[index].status;\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return _toConsumableArray(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["C:\\Users\\HOME\\Desktop\\Quanly_redux\\src\\reducers\\tasks.js"],"names":["types","s4","Math","floor","random","toString","substring","generateID","findIndex","tasks","id","result","forEach","task","index","data","JSON","parse","localStorage","getItem","initialState","myReducer","state","action","type","LIST_ALL","ADD_TASK","newTask","name","status","push","setItem","stringify","UPDATE_STATUS_TASK"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;;AACA,IAAIC,EAAE,GAAG,SAALA,EAAK,GAAK;AACV,SAAOC,IAAI,CAACC,KAAL,CAAY,IAAED,IAAI,CAACE,MAAL,KAAc,OAA5B,EAAsCC,QAAtC,CAA+C,EAA/C,EAAmDC,SAAnD,CAA6D,CAA7D,CAAP,CADU,CAC8D;AACzE,CAFH;;AAGA,IAAIC,UAAU,GAAG,SAAbA,UAAa,GAAK;AAClB,SAAON,EAAE,KAAIA,EAAE,EAAR,GAAaA,EAAE,EAAf,GAAoB,GAApB,GAA0BA,EAAE,EAA5B,GAAiC,GAAjC,GAAsCA,EAAE,EAAxC,GAA2C,GAA3C,GAAgDA,EAAE,EAAlD,GAAqD,GAArD,GAA0DA,EAAE,EAA5D,GAAgE,GAAhE,GAAqEA,EAAE,EAA9E;AACD,CAFH;;AAGA,IAAIO,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAOC,EAAP,EAAa;AAEzB,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,IAAD,EAAMC,KAAN,EAAc;AACxB,QAAGD,IAAI,CAACH,EAAL,KAAYA,EAAf,EACIC,MAAM,GAAGG,KAAT;AACP,GAHD;AAIA,SAAOH,MAAP;AACD,CARH;;AASA,IAAII,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AAEA,IAAIC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAS,EAAhC;;AAEA,IAAIM,SAAS,GAAG,SAAZA,SAAY,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBF,YAAwB;AAAA,MAAVG,MAAU;;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKxB,KAAK,CAACyB,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKtB,KAAK,CAAC0B,QAAX;AACI,UAAIC,OAAO,GAAG;AACVjB,QAAAA,EAAE,EAAEH,UAAU,EADJ;AAEVqB,QAAAA,IAAI,EAAEL,MAAM,CAACV,IAAP,CAAYe,IAFR;AAGVC,QAAAA,MAAM,EAAEN,MAAM,CAACV,IAAP,CAAYgB,MAAZ,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC;AAHrC,OAAd;AAKAP,MAAAA,KAAK,CAACQ,IAAN,CAAWH,OAAX;AACAT,MAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA6Bf,IAAI,CAACgB,SAAL,CAAeV,KAAf,CAA7B;AACA,gCAAWA,KAAX;;AACJ,SAAKtB,KAAK,CAACiC,kBAAX;AAEI,UAAIvB,EAAE,GAAGa,MAAM,CAACb,EAAhB;AACA,UAAII,KAAK,GAAGN,SAAS,CAACc,KAAD,EAAOZ,EAAP,CAArB;AACAY,MAAAA,KAAK,CAACR,KAAD,CAAL,CAAae,MAAb,GAAqB,CAAEP,KAAK,CAACR,KAAD,CAAL,CAAae,MAApC;AACAX,MAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA6Bf,IAAI,CAACgB,SAAL,CAAeV,KAAf,CAA7B;AACA,gCAAWA,KAAX;;AACJ;AAAS,aAAOA,KAAP;AAnBb;AAsBH,CAvBD;;AAyBA,eAAeD,SAAf","sourcesContent":["import * as types from './../constants/actionTypes';\r\nlet s4 = () =>{\r\n    return Math.floor((1+Math.random()*0x10000)).toString(16).substring(1); // random ÍD\r\n  }\r\nlet generateID = () =>{\r\n    return s4()+ s4() + s4() + '-' + s4() + '-'+ s4()+'-'+ s4()+'-'+ s4()+ '-'+ s4()\r\n  }\r\nlet findIndex = (tasks,id) =>{\r\n    \r\n    let result = -1;\r\n    tasks.forEach((task,index)=>{\r\n        if(task.id === id)\r\n            result = index;\r\n    })\r\n    return result;\r\n  }\r\nlet data = JSON.parse(localStorage.getItem('tasks'));\r\n\r\nlet initialState = data ? data: [];\r\n\r\nlet myReducer = (state = initialState ,action) =>{\r\n    switch(action.type){\r\n        case types.LIST_ALL:\r\n            return state;\r\n        case types.ADD_TASK:\r\n            let newTask = {\r\n                id: generateID(),\r\n                name: action.task.name,\r\n                status: action.task.status === 'true' ? true : false\r\n            }          \r\n            state.push(newTask);\r\n            localStorage.setItem('tasks',JSON.stringify(state));\r\n            return [...state];\r\n        case types.UPDATE_STATUS_TASK:\r\n           \r\n            let id = action.id;\r\n            let index = findIndex(state,id);\r\n            state[index].status= ! state[index].status;            \r\n            localStorage.setItem('tasks',JSON.stringify(state));\r\n            return [...state];\r\n        default: return state;\r\n    }\r\n    \r\n}\r\n\r\nexport default myReducer;\r\n"]},"metadata":{},"sourceType":"module"}