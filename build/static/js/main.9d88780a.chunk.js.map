{"version":3,"sources":["Components/TaskForm.js","Components/TaskSearchControl.js","Components/TaskSortControl.js","Components/TaskControl.js","Components/TaskItem.js","Components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCloseForm","onChange","event","target","name","value","setState","defineProperty","onSubmit","preventDefault","state","onClear","status","id","task","nextProps","react_default","a","createElement","className","onClick","type","Component","TaskSearch","onSearch","keyword","placeholder","TaskSort","sortBy","sortValue","console","log","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","href","role","TaskControl","TaskSearchControl","TaskSortControl","TaskItem","onUpdateStatus","onDelete","onUpdate","_this$props","index","App","onFilter","filterName","filterStatus","_this2","tasks","_this$state","elmtasks","map","Components_TaskItem","key","onToggleForm","isDisplayForm","taskEditing","onShowForm","data","generateID","push","findIndex","localStorage","setItem","JSON","stringify","splice","result","forEach","parseInt","filter","toLowerCase","getItem","parse","Math","floor","random","toString","substring","s4","indexOf","sort","b","elmTaskForm","Components_TaskForm","Components_TaskControl","TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d88780a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass TaskForm extends Component{\r\n   constructor(props){\r\n       super(props)\r\n       this.state ={\r\n           id: '',\r\n           name: '',\r\n           status: false\r\n       }\r\n   }\r\n   componentWillMount(){\r\n       if(this.props.task){\r\n           this.setState({\r\n                id: this.props.task.id,\r\n                name: this.props.task.name,\r\n                status: this.props.task.status\r\n           });\r\n            \r\n       }\r\n   }\r\n   componentWillReceiveProps(nextProps){\r\n    if(nextProps && nextProps.task){\r\n        this.setState({\r\n             id: nextProps.task.id,\r\n             name: nextProps.task.name,\r\n             status: nextProps.task.status\r\n        });\r\n         \r\n    } else if(!nextProps.task){\r\n        this.setState({\r\n           id: '',\r\n           name: '',\r\n           status: false\r\n        })\r\n    }\r\n   }\r\n    onCloseForm = () =>{\r\n       this.props.onCloseForm()\r\n   } \r\n   onChange =(event) =>{\r\n       let target= event.target;\r\n       let name = target.name;\r\n       let value = target.value;\r\n       if( name === 'status'){\r\n           value = target.value ==='true' ? true : false\r\n       }\r\n       this.setState({\r\n           [name]: value\r\n       })\r\n   }\r\n   onSubmit = (event) =>{\r\n       event.preventDefault();\r\n       this.props.onSubmit(this.state);\r\n       this.onClear();\r\n       this.onCloseForm();\r\n   }\r\n   onClear =() =>{\r\n       this.setState({\r\n           name: '',\r\n           status: false\r\n       })\r\n   }\r\n    render(){\r\n        let {id} = this.state;\r\n        return (\r\n            <div className=\"panel panel-warning\">\r\n            <div className=\"panel-heading\">\r\n                <h3 className=\"panel-title\">\r\n                { id !== ''? 'Cập nhật công việc' : 'Thêm công việc' }\r\n                </h3>\r\n                <span className=\"fa fa-times-circle text-right\" onClick={this.onCloseForm}></span>\r\n            </div>\r\n            <div className=\"panel-body\">\r\n                {/* {<!-- form -->} */}\r\n                <form onSubmit = {this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Tên</label>\r\n                        <input type=\"text\" \r\n                                className=\"form-control\" \r\n                                name=\"name\"\r\n                                value= {this.state.name}\r\n                                onChange= {this.onChange}\r\n                                />\r\n                    </div>\r\n                        <label >Trạng thái: </label>\r\n                        <select name=\"status\" \r\n                                id=\"input\" \r\n                                className=\"form-control\" \r\n                                value = {this.state.status}\r\n                                onChange={this.onChange}\r\n                                >\r\n                            <option value={true}>Kích hoạt</option>\r\n                            <option value={false}>Ẩn</option>\r\n                        </select><br/>\r\n                    <div className=\"text-center\">\r\n                        <button type=\"submit\" className=\"btn btn-warning\">\r\n                            <span className=\"fa fa-plus mr-5\"></span>Lưu lại\r\n                        </button>&nbsp;\r\n                        \r\n                        <button type=\"button\" \r\n                                className=\"btn btn-danger\"\r\n                                onClick ={this.onClear}\r\n                                >\r\n                            <span className=\"fa fa-close mr-5\"></span>Hủy bỏ\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                \r\n                </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\nexport default TaskForm\r\n","import React, { Component } from 'react';\r\n\r\nclass TaskSearch extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      keyword: ''\r\n    }\r\n  }\r\n  onChange = (event) =>{\r\n      let target = event.target;\r\n      let name = target.name;\r\n      let value = target.value;\r\n      this.setState({\r\n        [name] : value\r\n      })\r\n  }\r\n  onSearch = ()=>{\r\n    this.props.onSearch(this.state.keyword);\r\n  }\r\n  render() {\r\n    let {keyword} = this.state\r\n    return (\r\n          <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                  <div className=\"input-group\">\r\n                      <input type=\"text\" \r\n                              className=\"form-control\" \r\n                              name=\"keyword\" \r\n                              value ={keyword}\r\n                              onChange = {this.onChange}\r\n                              placeholder=\"Nhập từ khóa\"/>\r\n                      <span className=\"input-group-btn\">\r\n                          <button type=\"button\" \r\n                                  className=\"btn btn-primary\"\r\n                                  onClick = {this.onSearch}\r\n                                  >\r\n                              <span className=\"fa fa-search mr-5\"></span>Tìm\r\n                          </button>\r\n                      </span>\r\n                  </div>\r\n              \r\n          </div>\r\n          \r\n    \r\n  \r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskSearch;\r\n","import React, { Component } from 'react';\r\n\r\nclass TaskSort extends Component {\r\n    \r\n    \r\n\r\n    onClick(sortBy,sortValue){\r\n         console.log(sortBy,'-',sortValue);\r\n         this.props.onSort(sortBy,sortValue);\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (  \r\n                            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                                <div className=\"dropdown\">\r\n                                    \r\n                                    <button type=\"button\" \r\n                                            className=\"btn btn-primary dropdown-toggle\"\r\n                                            id=\"dropdownMenu1\"\r\n                                            data-toggle=\"dropdown\"\r\n                                            aria-haspopup=\"true\"\r\n                                            aria-expanded=\"true\"\r\n                                            >Sắp xếp <span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                                    </button>\r\n                                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                                        <li onClick ={()=> this.onClick('name',1)}>\r\n                                            <a href=\"/\" \r\n                                                role=\"button\" \r\n                                                className = {(this.props.sortBy === 'name' && this.props.sortValue === 1)?'sort_selected' :''}                                               \r\n                                                >\r\n                                                <span className=\"fa fa-sort-alpha-asc pr5\">\r\n                                                    Tên A-Z\r\n                                                </span></a>\r\n                                        </li>\r\n                                        <li onClick ={()=> this.onClick('name',-1)}>\r\n                                            <a href=\"/\" \r\n                                               role=\"button\"\r\n                                               className = {(this.props.sortBy === 'name' && this.props.sortValue === -1)?'sort_selected' :''}\r\n                                               >\r\n                                                <span className=\"fa fa-sort-alpha-desc pr5\">\r\n                                                    Tên Z-A  \r\n                                                </span>\r\n                                            </a>\r\n                                        </li >\r\n                                        <li role=\"separator\" className=\"divider\"></li>\r\n                                        <li onClick ={()=> this.onClick('status',1)}>\r\n                                            <a href=\"/\" \r\n                                                role=\"button\"\r\n                                                className = {(this.props.sortBy === 'status' && this.props.sortValue === 1)?'sort_selected' :''}\r\n                                                >\r\n                                                Trạng thái kích hoạt\r\n                                            </a> \r\n                                        </li>\r\n                                        <li onClick ={()=> this.onClick('status'-1)}>\r\n                                            <a href=\"/\" \r\n                                                role=\"button\"\r\n                                                className = {(this.props.sortBy === 'status' && this.props.sortValue === -1)?'sort_selected' :''}\r\n                                                >\r\n                                                Trạng thái An~\r\n                                            </a> \r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                        \r\n                    \r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskSort;\r\n","import React, { Component } from 'react';\r\nimport TaskSearch from './TaskSearchControl';\r\nimport TaskSort from './TaskSortControl';\r\nclass TaskControl extends Component {\r\n  render() {\r\n    return (\r\n    \r\n                        <div className=\"row mt-15\">   \r\n                            {/* <!-- Search --> */}\r\n                           <TaskSearch \r\n                            onSearch = {this.props.onSearch}\r\n                           \r\n                            />    \r\n                            {/* <!-- Sort --> */}\r\n                           <TaskSort\r\n                             onSort ={this.props.onSort}\r\n                             sortBy = {this.props.sortBy}\r\n                             sortValue = {this.props.sortValue}\r\n                            \r\n                           />\r\n                        </div>\r\n                    \r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskControl;\r\n","import React, { Component } from 'react';\r\n\r\nclass TaskItem extends Component{\r\n    onUpdateStatus =() =>{\r\n            this.props.onUpdateStatus(this.props.task.id);\r\n    }\r\n    onDelete = ()=>{\r\n            this.props.onDelete(this.props.task.id);\r\n   }\r\n   onUpdate = ()=>{\r\n    this.props.onUpdate(this.props.task.id);\r\n}\r\n \r\n    render(){\r\n        let {index,task}= this.props\r\n        return(\r\n         \r\n                <tr>\r\n                                          <td>{index+1}</td>\r\n                                            <td>{task.name}</td>\r\n                                            <td className=\"text-center\">\r\n                                                <span className={task.status===true?'label label-danger' :\r\n                                            'label label-success'}\r\n                                                    onClick={this.onUpdateStatus}\r\n                                            >{task.status===true?'Kích hoạt':'Ẩn'}</span>\r\n                                            </td>\r\n                                            <td className=\"text-center\">\r\n                                                <button type=\"button\" \r\n                                                        className=\"btn btn-warning\"\r\n                                                        onClick = {this.onUpdate}\r\n                                                        >\r\n                                                        <span className=\"fa fa-pencil mr5\"></span>Sửa\r\n                                                </button>\r\n                                                &nbsp;  \r\n                                                <button type=\"button\" \r\n                                                        className=\"btn btn-danger\"\r\n                                                        onClick = {this.onDelete}\r\n                                                        >\r\n                                                        <span className=\"fa fa-trash mr5\"></span>Xóa\r\n                                                </button>\r\n                                                \r\n                                            </td>\r\n                                          </tr>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default TaskItem;","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem';\r\nclass App extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state ={\r\n            filterName: '',\r\n            filterStatus: -1 // all: -1 , active : 1 , deactive : 0\r\n      }\r\n  }\r\n  onChange = (event) =>{\r\n      let target= event.target;\r\n      let name = target.name;\r\n      let value = target.value;\r\n      this.props.onFilter(\r\n        name === 'fillterName' ? value : this.state.filterName,\r\n        name === 'filterStatus'? value : this.state.filterStatus\r\n        )\r\n      this.setState({\r\n          [name] :value\r\n      })\r\n  }\r\n    render() {\r\n    let {tasks} = this.props;\r\n    let{filterName,filterStatus} = this.state;\r\n    let elmtasks = tasks.map((task,index)=>{\r\n            return <TaskItem key={task.id}\r\n                             index={index}\r\n                             task ={task}\r\n                            onUpdateStatus={this.props.onUpdateStatus}\r\n                            onDelete ={this.props.onDelete}\r\n                            onUpdate = {this.props.onUpdate}\r\n                            />\r\n    })\r\n    return (\r\n        <div className=\"row mt-15\">\r\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                                \r\n                                <table className=\"table table-bordered table-hover\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"text-center\">STT</th>\r\n                                            <th className=\"text-center\">Tên</th>\r\n                                            <th className=\"text-center\">Trạng thái</th>\r\n                                            <th className=\"text-center\">Hành động</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td></td>\r\n                                            <td>\r\n                                                <input \r\n                                                    type=\"text\" \r\n                                                    name=\"filterName\"\r\n                                                    value = {filterName} \r\n                                                    onChange={this.onChange}\r\n                                                    className=\"form-control\" \r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                \r\n                                                <select name=\"filterStatus\"\r\n                                                        value={filterStatus}\r\n                                                        onChange = {this.onChange} \r\n                                                        className=\"form-control\"\r\n                                                >\r\n                                                    <option value=\"-1\">Tất cả</option>\r\n                                                    <option value=\"0\">Ẩn</option>\r\n                                                    <option value=\"1\">Kích hoạt</option>\r\n                                                </select>\r\n                                                \r\n                                            </td>\r\n                                            <td></td>\r\n                                        </tr>\r\n                                    {elmtasks}\r\n                                    </tbody>\r\n                                </table>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        \r\n                        \r\n                \r\n            \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport './Components/TaskForm';\nimport TaskForm from './Components/TaskForm';\nimport TaskControl from './Components/TaskControl';\nimport TaskList from './Components/TaskList';\nimport {findIndex} from 'lodash';\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      tasks: [], // id, name, status,\n      isDisplayForm: false,\n      taskEditing: null,\n      filter : {\n        name: '',\n        status: -1\n      },\n      keyword: '',\n      sortBy : 'name',\n      sortValue: 1\n    }\n    }\n  componentWillMount(){\n    if(localStorage && localStorage.getItem('tasks')){\n      let tasks= JSON.parse(localStorage.getItem('tasks'));\n      this.setState({\n        tasks: tasks\n      })\n    }\n  }\n  \n  \n  s4(){\n    return Math.floor((1+Math.random()*0x10000)).toString(16).substring(1); // random ÍD\n  }\n  generateID(){\n    return this.s4()+ this.s4() + this.s4() + '-' + this.s4() + '-'+ this.s4()+'-'+ this.s4()+'-'+ this.s4()+ '-'+ this.s4()\n  }\n  onToggleForm =() =>{\n    if(this.state.isDisplayForm && this.state.taskEditing !== null){\n        this.setState({\n          isDisplayForm: true,\n          taskEditing: null\n        })\n    } else{\n      this.setState({\n        isDisplayForm: !this.state.isDisplayForm,\n        taskEditing: null\n      })\n    } \n    \n  }\n  onCloseForm =() =>{\n    this.setState({\n      isDisplayForm: false\n    })\n    \n\n  }\n  onShowForm = () =>{\n    this.setState({\n      isDisplayForm: true\n    })\n  }\n  onSubmit = (data)=>{\n    let {tasks} =this.state;\n    if (data.id === ''){\n      data.id = this.generateID()\n      tasks.push(data)\n    }else{\n      let index = this.findIndex(data.id)\n      tasks[index] = data;\n    }\n    \n    this.setState({\n      tasks: tasks\n    })\n    localStorage.setItem('tasks',JSON.stringify(tasks));\n  }\n  onUpdateStatus =(id) =>{\n    let {tasks} = this.state\n    let index = this.findIndex(id)\n    if(index !== -1){\n      tasks[index].status = ! tasks[index].status;\n      this.setState({\n      tasks : tasks\n    })\n\n    }\n        localStorage.setItem('tasks',JSON.stringify(tasks));\n  }\n  onDelete =(id) =>{\n      let {tasks} =this.state\n      let index  = findIndex(tasks,(task)=>{\n          return task.id === id;\n      })\n      if(index !== -1){\n        tasks.splice(index,1);\n        this.setState({\n          tasks : tasks\n        })\n      }\n      localStorage.setItem('tasks',JSON.stringify(tasks))\n  }\n  onUpdate = (id) =>{\n      let {tasks} = this.state\n      let index = this.findIndex(id)\n      let taskEditing = tasks[index];\n      this.setState({\n        taskEditing : taskEditing \n      });\n      this.onShowForm();\n  }\n\n  findIndex = (id) =>{\n    let {tasks} = this.state\n    let result = -1;\n    tasks.forEach((task,index)=>{\n        if(task.id === id)\n            result = index;\n    })\n    return result;\n  }\n  onFilter = (filterName,filterStatus) =>{\n     filterStatus = parseInt(filterStatus,10);\n     this.setState({\n       filter:{\n         name: filterName.toLowerCase(),\n         status: filterStatus\n       }\n     })\n  }\n  onSearch = (keyword)=>{\n   \n    this.setState({\n      keyword: keyword\n    })\n  }\n  onSort = (sortBy,sortValue) =>{\n      this.setState({\n        sortBy : sortBy,\n        sortValue: sortValue\n      })\n  }\n  \n  render() {\n    let {tasks,\n        isDisplayForm,\n        taskEditing,\n        filter,\n        keyword,\n        sortBy,\n        sortValue\n      }= this.state;\n    if(filter){\n      if(filter.name){\n          tasks=  tasks.filter((task)=>{\n              return task.name.toLowerCase().indexOf(filter.name) !== -1;\n          });\n      }\n     \n        tasks = tasks.filter((task)=>{\n            if(filter.status === -1){\n                return task;\n            }\n            else {\n                return task.status === (filter.status === 1 ? true : false)\n            }\n        })\n      \n    }\n    if(keyword){\n      tasks=  tasks.filter((task)=>{\n        return task.name.toLowerCase().indexOf(keyword) !== -1;\n        });\n    }\n    if(sortBy === 'name'){\n        tasks.sort((a,b)=>{\n          if(a.name > b.name) return sortValue;\n          else if(a.name < b.name) return -sortValue;\n          else return 0;\n        }) ; \n    }\n    else{\n      tasks.sort((a,b)=>{\n        if(a.status > b.status) return -sortValue;\n        else if(a.status < b.status) return   sortValue;\n        else return 0;\n      }) ;\n    }\n    let elmTaskForm = isDisplayForm\n          ? <TaskForm onSubmit ={this.onSubmit} \n                      onCloseForm={this.onCloseForm}\n                      task ={taskEditing}\n                      /> \n          :''\n    return (\n     \n        <div className=\"container\">\n            <div className=\"text-center\">\n                <h1>Quản lý công việc</h1>\n            </div>\n            \n            <div className=\"row\">\n                <div className={isDisplayForm? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\"}>\n                    {elmTaskForm}\n                </div>\n                <div className={isDisplayForm ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\":\"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n                    <button type=\"button\"\n                           className=\"btn btn-primary\"\n                           onClick = {this.onToggleForm}\n                           >\n                        <span className=\"fa fa-plus mr-5\"></span>Thêm công việc\n                    </button>\n                        {/* {<!-- { Search-Sort} -->} */}\n                              <TaskControl\n                                onSearch = {this.onSearch}\n                                onSort ={this.onSort}\n                                sortBy = {sortBy}\n                                sortValue ={sortValue}\n                              />\n                        {/* <!-- List --> */}\n                              <TaskList\n                                tasks = {tasks}\n                                onUpdateStatus = {this.onUpdateStatus}\n                                onDelete ={this.onDelete}\n                                onUpdate ={this.onUpdate}\n                                onFilter ={this.onFilter}\n                              />\n                </div>\n                \n            </div>\n            \n        </div>\n        \n      \n    \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/jquery/src/jquery';\nimport '../node_modules/bootstrap/dist/js/bootstrap';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}